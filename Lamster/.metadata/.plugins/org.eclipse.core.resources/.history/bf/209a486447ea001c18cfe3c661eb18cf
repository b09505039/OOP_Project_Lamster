package input;

import entity.Mob;

public class Player extends Mob {

	public double y;
	// public double z;
	public double rotation;
	public double xa;
	public double za;

	public double rotationa;
	public static boolean turnLeft = false;
	public static boolean turnRight = false;
	public static boolean walk = false;// for sight shaking
	public static boolean crouchWalk = false;// for sight shaking
	public static boolean runWalk = false;// for sight shaking
	public double walkSpeed = 0;
	public int ff = 1;

	private InputHandler input;

	public Player(InputHandler input) {
		this.input = input;
	}

	public void tick() {
		double rotationSpeed = 0.02;

		// double xMove = 0;
		// double zMove = 0;

		double jumpHeight = 2.5;
		double crouchHeight = 0.3;

		xa = 0;
		za = 0;

		// System.out.println(walk);

		if (input.forward) {
			za++;
			// zMove++;
			walk = true;
		}
		if (input.back) {
			za--;
			// zMove--;
			walk = true;
		}
		if (input.left) {
			xa--;
			// xMove--;
			walk = true;
		}
		if (input.right) {
			xa++;
			// xMove++;
			walk = true;
		}

		if (input.rleft) {
			rotationa -= rotationSpeed;
		}

		if (input.rright) {
			rotationa += rotationSpeed;
		}
		rotation += rotationa;
		rotationa *= 0.5;

		if (input.stop) {
			x = level.xSpawn * 8.1;
			z = level.xSpawn * 8.1;
			//x = 60 * 8.1;
			//z = 60 * 8.1;
			xa = 0;
			za = 0;
		}
//
		move(xa, za, rotation, walkSpeed);
//		if (xa != 0 || za != 0) {
//			move(xa, za, rotation, walkSpeed);
//		}
//
		if (input.jump) {
			y += jumpHeight;
			input.run = false;
		}

		if (input.crouch) {
			y -= crouchHeight;
			input.run = false;
			crouchWalk = true;
			walkSpeed = 1.0;
		}

		if (input.run) {
			walkSpeed = 2.0;
			walk = true;
			runWalk = true;
		}

		if (!input.forward && !input.back && !input.left && !input.right) {
			walk = false;
		}

		if (!input.crouch) {
			crouchWalk = false;

		}

		if (!input.run) {
			runWalk = false;

		}
		
		if(x >=59 * 8.1 && z >= 59 * 8.1 && ff==1) {
			win();
			ff = 0;
			
		}

		// xa += ((xMove * Math.cos(rotation)) + (zMove * Math.sin(rotation)))
		// * walkSpeed;
		// za += ((zMove * Math.cos(rotation)) - (xMove * Math.sin(rotation)))
		// * walkSpeed;

		// x += xa;
		// System.out.println(x);
		y *= 0.9;
		// z += za;

		// xa *= 0.1;
		// za *= 0.1;

//		System.out.println("x = " + x );
//		System.out.println("y = " + y );
//		System.out.println("z = " + z );
	}

	public void tick(boolean forward, boolean back, boolean left, boolean right, boolean rleft, boolean rright,
			boolean jump, boolean crouch, boolean run) {

	}

	public void win() {
		System.out.println("1");
		
		level.win();
		
		// TODO Auto-generated method stub
		
	}
}
