package level;

import entity.Entity;
import graphics.Sprite;
import graphics.Texture;
import input.Player;
import main.Game;
import main.RunGame;

import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.imageio.ImageIO;

public class Level {

	public Block[] blocks;
	public int width, height;
	private Block solidWall = new SolidBlock();
	final Random random = new Random(300);

	public int xSpawn;						//xSpawn is the x location when player new game
	public int ySpawn;						//ySpawn is the z location when player new game

	protected int wallCol = 0xB3CEE2;		//initialize wallCol's color
	protected int wallTex = 0;

	protected int floorCol = 0x9CA09B;		//initialize floorCol's color
	protected int floorTex = 0;

	protected int ceilCol = 0x9CA09B;		//initialize ceilCol's color
	protected int ceilTex = 0;

	private List<Entity> entities = new ArrayList<Entity>();

	protected Game game;
	public Player player;

	public void init(Game game, String name, int w, int h, int[] pixels) {
		this.game = game;

		player = game.player;
		

		solidWall.col = Texture.getCol(wallCol);
		solidWall.tex = Texture.getCol(wallTex);
		this.width = w;
		this.height = h;
		blocks = new Block[width * height];

		for (int y = 0; y < h; y++) {
			for (int x = 0; x < w; x++) {
				int col = pixels[x + y * w] & 0xffffff;
				// int id = 255 - ((pixels[x + y * w] >> 24) & 0xff);

				Block block = getBlock(x, y, col);
				// block.id = id;

				if (block.tex == -1)
					block.tex = wallTex;
				if (block.floorTex == -1)
					block.floorTex = floorTex;
				if (block.ceilTex == -1)
					block.ceilTex = ceilTex;
				if (block.col == -1)
					block.col = Texture.getCol(wallCol);
				if (block.floorCol == -1)
					block.floorCol = Texture.getCol(floorCol);
				if (block.ceilCol == -1)
					block.ceilCol = Texture.getCol(ceilCol);

				if (x == 0 && y == 0) {
					block.addSprite(new Sprite(61, 1, 60));
				}

				blocks[x + y * w] = block;
				block.level = this;
				block.x = x;
				block.y = y;
			}
		}

		for (int y = 0; y < h; y++) {
			for (int x = 0; x < w; x++) {
				int col = pixels[x + y * w] & 0xffffff;
				decorateBlock(x, y, blocks[x + y * w], col);
			}
		}
		
		//player.x = xSpawn * 8.1;
		//player.z = ySpawn * 8.1;
	}

	// constructor can be replace by init method
	public Level(int width, int height) {
		this.width = width;
		this.height = height;
		blocks = new Block[(width) * (height)];
		generateLevel();
	}

	public void tick() {		//one unit at a time every time it gets called

		for (int i = 0; i < entities.size(); i++) {
			Entity e = entities.get(i);
			e.tick();
			e.updatePos();// 更新位置?

			if (e.isRemoved()) {// 未知-1
				entities.remove(i--);// 似乎生成後移除
			}
		}

		for (int y = 0; y < height; y++) {// 未知-2
			for (int x = 0; x < width; x++) {
				blocks[x + y * width].tick();// 似乎生成後移除
			}
		}

	}

	public void addEntity(Entity e) {
		entities.add(e);
		e.level = this;
		/**
		 * 更新位置
		 */
		e.updatePos();
	}

	public void generateLevel() {

		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				Block block = null;
				if (random.nextInt(10) == 0) {
					block = new SolidBlock();
				} else {
					block = new Block();
					if (random.nextInt(25) == 0) {
						block.addSprite(new Sprite(0, 0, 0));
					}
				}
				blocks[x + y * width] = block;
				// block.level = this;//尚未了解用途
				// block.x = x;
				// block.y = y;

			}
		}

	}

	protected void decorateBlock(int x, int y, Block block, int col) {
		block.decorate(this, x, y);
		if (col == 0xFFFF00) {
			xSpawn = x;
			ySpawn = y;
		}
		if (col == 0x1A2108 || col == 0xff0007) {
			block.floorTex = 7;
			block.ceilTex = 7;
		}

		if (col == 0xC6C6C6)
			block.col = Texture.getCol(0xa0a0a0);
		if (col == 0xC6C697)
			block.col = Texture.getCol(0xa0a0a0);

		if (col == 0x653A00) {
			block.floorCol = Texture.getCol(0xB56600);
			block.floorTex = 3 * 8 + 1;
		}

		if (col == 0x93FF9B) {
			block.col = Texture.getCol(0x2AAF33);
			block.tex = 8;
		}
	}

	protected Block getBlock(int x, int y, int col) {
		if (col == 0x93FF9B)
			return new SolidBlock();
		if (col == 0xFFFFFF)
			return new SolidBlock();
		if (col == 0x1A2108)
			return new Block();
		if (col == 0x8cfffb) {
			// System.out.println("trigger");
		}
		return new Block();
	}

	public Block getBlock(int x, int y) {
		if (x < 0 || y < 0 || x >= width || y >= height) {
			// System.out.println("used");
			// System.out.println("width = "+width);
			return solidWall;
		}
		// System.out.println("In Level.java 82 : "+(blocks[x + y * width]));
		return blocks[x + y * width];
	}

//	public Block create(int x, int y) {
//		if (x < 0 || y < 0 || x >= width || y >= height) {
//			return Block.solidWall;
//		}
//		return blocks[x + y * width];
//
//	}

	private static Map<String, Level> loaded = new HashMap<String, Level>();

	public static void clear() {
		loaded.clear();
	}

	public static Level loadLevel(Game game, String name) {
		if (loaded.containsKey(name))
			return loaded.get(name);

		try {

			BufferedImage img = ImageIO.read(Level.class.getResource("/" + name + ".png"));

			int w = img.getWidth();

			int h = img.getHeight();

			int[] pixels = new int[w * h];

			img.getRGB(0, 0, w, h, pixels, 0, w);

			Level level = Level.byName(name);

			level.init(game, name, w, h, pixels);

			loaded.put(name, level);

			return level;
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	private static Level byName(String name) {
		try {

			name = name.substring(0, 1).toUpperCase() + name.substring(1);

			return (Level) Class.forName("level." + name + "Level").newInstance();
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	public void win() {
		System.out.println("2");
		game.win();
		// TODO Auto-generated method stub

	}

}
